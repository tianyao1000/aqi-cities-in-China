mean(sB)
nfit<-lm(count~spray-1)
nfit<-lm(count~spray-1,data=InsectSprays)
summary(nfit)$coef
spray2<-relevel(InsectSprays,"C")
spray2<-relevel(InsectSprays$spray,"C")
InsectSprays$spray
name(InsectSprays)
names(InsectSprays)
head(InsectSprays)
spray2
InsectSprays$spray
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
fit$coef[2]-fit$coef[3]
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit<-lm(Numeric~year,)
fit<-lm(1~1)
fit <- lm(hunger$Numeric ~
| hunger$Year)
fit <- lm(hunger$Numeric ~ hunger$Year)
summary(fit)
summary(fit)$coef
library(swirl)
swirl()
swirl()
# load in hunger data
hunger <- read.csv("hunger.csv")
# exclude the data with "Both Sexes" as values (only want Male vs Female)
hunger <- hunger[hunger$Sex!="Both sexes", ]
# structure of data
str(hunger)
male.fit <- lm(Numeric ~ Year, data = hunger[hunger$Sex == "Male", ])
female.fit <- lm(Numeric ~ Year, data = hunger[hunger$Sex == "Female", ])
interaction.fit <- lm(Numeric ~ Year*Sex, data = hunger)
summary(male.fit)$coef
summary(female.fit)$coef
summary(interaction.fit)$coef
-0.29339638-0.03000132
swirl()
lm(Numeric~Year,data=hunger[hunger$Sex=="Female"])
lm(Numeric~Year,hunger[hunger$Sex=="Female"])
lm(Numeric~Year,hunger[hunger$Sex=="Female",])
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~
| hunger$Year[hunger$Sex=="Female"])
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~hunger$Year[hunger$Sex=="Female"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~hunger$Year[hunger$Sex=="Male"])
lmBoth<-lm(Numeric~Year+sex)
lmBoth<-lm(Numeric~Year+factor(Sex),hunger)
summary(lmBoth)
lmInter(Numeric~Sex*Year,hunger)
lmInter<-lm(Numeric~Sex*Year,hunger)
summary(lmInter)
fit<-lm(y~x,out2)
plot(fit,which=1)
fitno<-lm(y~x,out2[-1,])
plot(fitno,which=1)
coef(fitno)-coef(fit)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno<-out2[1."y"]-predict(fitno,out2[1,])
resno<-out2[1,"y"]-predict(fitno,out2[1,])
1-resid(fit)[1]/resno
hatvalue(fit)
hatvalues(fit)
head(hatvalues(fit))
sigma<-resid(fit)/deviance(fit)
sigma<-sqrt(deviance(fit)/df.residual(fit))
deviance(fit)
df.residual(fit)
resid(fit)
sum(resid(fit)^2)
rstd<-resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
hea(cbind(rstd,rstandard(fit)))
head(cbind(rstd,rstandard(fit)))
plot(fit,which=3)
plot(fit,which=2)
sigma1<-sd(fitno$residuals)/deviance(fitno)/df.residual(fitno)
sigma1<-sqrt(deviance(fitno)/df.residual(fitno)
)
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
predict(fitno,out2)-predict(fit,out2)
dy<-predict(fitno,out2)-predict(fit,out2)
dy<-2*sigma^2
dy^2/(2*sigma^2)
sum(dy^2/(2*sigma^2))
plot(fit,which=5)
fit<-lm(mpg~factor(cyl)+wt,data=mtcars)
summary(fit)
nofit<-lm(mpg~factor(cyl),data=mtcars)
summary(nofit)
fit3<-lm(mpg~factor(cyl)*wt,data=mtcars)
summary(fit3)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
lm(mpg ~ wt  + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit<-lm(y~x)
hatvalues(fit)
hatvalues(fit)
dfbetas(fit)
I(0.5*mtcars$wt)
mtcars$wt
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
lm(mpg ~ wt  + factor(cyl), data = mtcars)
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl<-lm(Fertiliy~.,swiss)
mdl<-lm(Fertility~.,swiss)
vif(mdl)
mdl<-lm(Fertility~.-Examination,swiss)
mdl2<-lm(Fertility~.-Examination,swiss)
vif(mdl2)
swirl()
swirl()
library(swirl)
swirl()
x1c<-simbias()
apply(x1c,1,mean)
fit1<-lm(Fertility~Agriculture,swiss)
fit3<-lm(Fertility~Agriculture+Examination+Education,swiss)
anova(fit1,fit3)
deviance(fit3)
Fit3
fit$df
fit3
l=summary(fit3)
l$df
d<-deviance(fit3)/43
n<-(deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d,2,43,lower.tail = FALSE)
shapiro.test(fit3$residuals)
anova(fit1,fit3,fit5,fit6)
install.package("caret")
install.packages("caret")
library(caret)
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
inTrain=createDataPartition(y=spam$type,p=0.75,list=FALSE)
Traindata=spam[inTrain,]
Testdata=spam[-inTrain,]
dim(Traindata)
set.seed(32223)
fold=createFolds(spam$type,k=10,list=TRUE,returnTrain = TRUE)
sapply(fold,length)
dim(fold)
fold[1]
fold[2]
fold[[1]][1:10]
class(fold)
fold[1][1:10]
x <- c("a", "b", "c", "c", "d", "a")
class(x)
dim(spam)
length(fold)
length(fold[[1]])
data(wage)
install.packages("ISLR")
library(ISLR)
data(Wage)
source('~/datasciencecoursera/practical machine learning/week2.R')
name(training)
names(training)
source('~/datasciencecoursera/practical machine learning/week2.R')
source('~/datasciencecoursera/practical machine learning/week2.R')
source('~/datasciencecoursera/practical machine learning/week2.R')
source('~/datasciencecoursera/practical machine learning/week2.R')
source('~/datasciencecoursera/practical machine learning/week2.R')
source('~/datasciencecoursera/practical machine learning/week2.R')
source('~/datasciencecoursera/practical machine learning/week2.R')
p
source('~/datasciencecoursera/practical machine learning/week2.R')
source('~/datasciencecoursera/practical machine learning/week2.R')
install.packages("Hmisc")
source('~/datasciencecoursera/practical machine learning/week2.R')
source('~/datasciencecoursera/practical machine learning/week2.R')
install.packages("grid.extra")
install.packages("grid.Extra")
source('~/datasciencecoursera/practical machine learning/week2.R')
source('~/datasciencecoursera/practical machine learning/week2.R')
p2
source('~/datasciencecoursera/practical machine learning/week2.R')
p2
source('~/datasciencecoursera/practical machine learning/week2.R')
source('~/datasciencecoursera/practical machine learning/week2.R')
p2
source('~/datasciencecoursera/practical machine learning/week2.R')
source('~/datasciencecoursera/practical machine learning/week2.R')
source('~/datasciencecoursera/practical machine learning/week2.R')
source('~/datasciencecoursera/practical machine learning/week2.R')
p
library(kernlab)
data("Wage")
library(ISLR); library(ggplot2);
data("Wage")
table(Wage$age)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(caret)
help(createDataPartition)
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
head(train)
dim(train)
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=TRUE)
train
length(train)
dim(train)
train[1]
class(train[1])
class(train[[1]])
diagnosis[train,]
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
diagnosis[train,]
library(ISLR)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
train
class(train)
class(diagnosis)
dim(diagnosis)
head(diagnosis)
diagnosis[train,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=TRUE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
class(trainIndex)
trainIndex
dim(trainIndex)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
gplot(inTrain,training$CompressiveStrength)
qplot(inTrain,training$CompressiveStrength)
qplot(inTrain,training$CompressiveStrength,colour=training$Cement)
qplot(inTrain,training$CompressiveStrength,colour=training$BlastFurnaceSlag)
training$Cement
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
qlist
grid.arrange(qlist, len)
class(qlist)
qlist[[1]]
qlist[1]
length(qlist)
qlist
dim(qlist)
grid.arrange(qlist[1,],qlist[2,] ncol=2)
grid.arrange(qlist[1,],qlist[2,] ncol=2)
grid.arrange(qlist[,1],qlist[,2] ncol=2)
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
grid.arrange(qlist[1,],qlist[2,] ,ncol=2)
qlist[1,]
class(qlist[1,])
class(qtemp)
class(qlist)
qlist[1]
class(qlist[1])
class(qlist[[1]])
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
class(qlist)
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
class(qlist)
qlist = list()
class(qlist)
qlist = rbine(qlist,1)
qlist = rbind(qlist,1)
class(qlist)
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
class(qlist)
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
class(qlist)
qlist[[1]]
grid.arrange(qlist,ncol=len)
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
grid.arrange(grobs = qlist, ncol = len)
grid.arrange(grobs = qlist, ncol = len/3,nrow=3)
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
grid.arrange(grobs = qlist, ncol = len/3,nrow=3)
grid.arrange(qlist[[1]],qlist[[2]], ncol = 2)
marrangeGrob(qlist, nrow=2, ncol=2)
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
grid.arrange(grobs = qlist, ncol = len/3,nrow=3)
as.string(1)
string(1)
as.character(1)
qlist=lapply(1:len,function(i) qplot(inTrain,training$CompressiveStrength,color=cut2(training[[attribute_names[i]]],g=par1)))
grid.arrange(grobs = qlist, ncol = len/3,nrow=3)
ml <- marrangeGrob(qlist, nrow=2, ncol=2)
ml <- marrangeGrob(qlist, nrow=2, ncol=2)
m1
grid.arrange(grobs = qlist, ncol = len/3,nrow=3)
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
source('~/datasciencecoursera/practical machine learning/week2 quiz.R')
grid.arrange(grobs = qlist, ncol = len/3,nrow=3)
marrangeGrob(qlist, nrow=2, ncol=2)
marrangeGrob(qlist, nrow=2, ncol=1)
data(iris)
library(ggplot2)
names(iris)
library(caret)
inTrian=createDataPartition(y=iris$Species,p=0.7,list=FALSE)
traindata = iris[inTrain,]
testdata = iris[-inTrain,]
g=ggplot(traindata,aes(Petal.Width,Sepal.Width,colors=Species))
p=g+geom_point(size=6)
p
p=g+geom_point(aes(color=Species,size=6))
p
modfit=train(Species~.,data=traindata,methods="rpart")
modfit=train(Species~.,data=traindata,methods="rpart")
traindata
iris
traindata = iris[inTrain,]
traindata
inTrain
class(inTrian)
dim(inTrian)
source('~/datasciencecoursera/practical machine learning/week3.R')
source('~/datasciencecoursera/practical machine learning/week3.R')
class(inTrian)
class(inTrain)
source('~/datasciencecoursera/practical machine learning/week3.R')
class(inTrain)
training
unique(iris$Species)
print(modFit$finalModel)
plot(modFit$finalModel)
source('~/datasciencecoursera/practical machine learning/week3.R')
source('~/datasciencecoursera/practical machine learning/week3.R')
install.packages(rattle)
install.packages("rattle")
source('~/datasciencecoursera/practical machine learning/week3.R')
source('~/datasciencecoursera/practical machine learning/week3.R')
install.packages("rpart.plot")
source('~/datasciencecoursera/practical machine learning/week3.R')
source('~/datasciencecoursera/practical machine learning/week3.R')
source('~/datasciencecoursera/practical machine learning/week3.R')
source('~/datasciencecoursera/practical machine learning/week3.R')
res
library(ggplot2)
source('~/datasciencecoursera/practical machine learning/week3.R')
install.packages("tree")
source('~/datasciencecoursera/practical machine learning/week3.R')
install.packages("ElemStatLearn")
source('~/datasciencecoursera/practical machine learning/week3.R')
source('~/datasciencecoursera/practical machine learning/week3.R')
class(ozone)
source('~/datasciencecoursera/practical machine learning/week3.R')
source('~/datasciencecoursera/practical machine learning/week3.R')
dim(ll)
source('~/datasciencecoursera/practical machine learning/week3.R')
source('~/datasciencecoursera/practical machine learning/week3.R')
source('~/datasciencecoursera/practical machine learning/week3.R')
predict(loess0,newdata=data.frame(ozone=1:155))
res =predict(loess0,newdata=data.frame(ozone=1:155))
class(res)
ll[1,] =res
ll[1,] <-res
class(ll[1,])
ll[1,]
ll[1,]=1:155
ll[1,]=1:155
ll[1,]
ll[1,]=(1:155)
1:155
source('~/datasciencecoursera/practical machine learning/week3.R')
source('~/datasciencecoursera/practical machine learning/week3.R')
install.packages("ISLR")
source('~/datasciencecoursera/practical machine learning/week3.R')
qplot(Testdata$wage,res)
Testdata
Wage$wage
source('~/datasciencecoursera/practical machine learning/week3.R')
source('~/datasciencecoursera/practical machine learning/week3.R')
source('~/datasciencecoursera/practical machine learning/week3.R')
source('~/datasciencecoursera/practical machine learning/week3.R')
install.packages("AppliedPredictiveModeling")
source('~/datasciencecoursera/practical machine learning/week3 quiz.R')
data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10,PerimStatusCh1=2)
source('~/datasciencecoursera/practical machine learning/week3 quiz.R')
source('~/datasciencecoursera/practical machine learning/week3 quiz.R')
source('~/datasciencecoursera/practical machine learning/week3 quiz.R')
install.packages("pgmm")
source('~/datasciencecoursera/practical machine learning/week3 quiz2.R')
source('~/datasciencecoursera/practical machine learning/week3 quiz2.R')
newdata
source('~/datasciencecoursera/practical machine learning/week3 quiz2.R')
newdata
olive$Area
source('~/datasciencecoursera/practical machine learning/week3 quiz2.R')
names(ElemStatLearn)
names(SAheart)
source('~/datasciencecoursera/practical machine learning/week3 quiz2.R')
source('~/datasciencecoursera/practical machine learning/week3 quiz2.R')
length(names(trainSA))
source('~/datasciencecoursera/practical machine learning/week3 quiz2.R')
res
source('~/datasciencecoursera/practical machine learning/week3 quiz2.R')
res1
res2
source('~/datasciencecoursera/practical machine learning/week3 quiz2.R')
names(vowel.train)
library(rmarkdown)
library(knitr)
source('~/datasciencecoursera/practical machine learning/week3 quiz2.R')
source('~/datasciencecoursera/practical machine learning/week3 quiz2.R')
source('~/datasciencecoursera/practical machine learning/week3 quiz2.R')
names(vowel.train)
fit=randomForest(y~., data=vowel.train)
source('~/datasciencecoursera/practical machine learning/week3 quiz2.R')
res
order(res)
order(res,decreasing = TRUE)
source('~/datasciencecoursera/practical machine learning/week3 quiz2.R')
order(res,decreasing = TRUE)
source('~/datasciencecoursera/practical machine learning/week3 quiz.R')
res1= predict(modfit,newdata=data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10,PerimStatusCh1=2))
install.packages("party")
library(ISLR); data(Wage); library(ggplot2); library(caret);
Wage <- subset(Wage,select=-c(logwage))
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
modFit <- train(wage ~ ., method="gbm",data=training,verbose=FALSE)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
modlda = train(Species ~ .,data=training,method="lda")
modnb = train(Species ~ ., data=training,method="nb")
install.packages("minuUI")
install.packages("miniUI")
version
source('~/datasciencecoursera/develop a data science application/week1.R')
source('~/datasciencecoursera/develop a data science application/week1.R')
source('~/datasciencecoursera/develop a data science application/week1.R')
source('~/datasciencecoursera/develop a data science application/week1.R')
source('~/datasciencecoursera/develop a data science application/week1.R')
View(pickXY)
pickXY(my_data)
aggregate(mtcars, by=list(cyl), FUN=mean)
aggregate(mtcars, by=list("cyl"), FUN=mean)
attach(mtcars)
aggregate(mtcars, by=list("cyl"), FUN=mean)
aggregate(mtcars, by=list(cyl), FUN=mean)
mtcars["mpg"]
shiny::runApp('datasciencecoursera/develop a data science application/project/Baoji_AQI')
shiny::runApp('datasciencecoursera/develop a data science application/project/Baoji_AQI')
runApp('datasciencecoursera/develop a data science application/project/Baoji_AQI')
runApp('datasciencecoursera/develop a data science application/project/Baoji_AQI')
runApp('datasciencecoursera/develop a data science application/project/Baoji_AQI')
runApp('datasciencecoursera/develop a data science application/project/Baoji_AQI')
shiny::runApp('datasciencecoursera/develop a data science application/project/Baoji_AQI')
runApp('datasciencecoursera/develop a data science application/project/Baoji_AQI')
runApp('datasciencecoursera/develop a data science application/project/Baoji_AQI')
runApp('datasciencecoursera/develop a data science application/project/Baoji_AQI')
runApp('datasciencecoursera/develop a data science application/project/Baoji_AQI')
runApp('datasciencecoursera/develop a data science application/project/Baoji_AQI')
runApp('datasciencecoursera/develop a data science application/project/Baoji_AQI')
runApp('datasciencecoursera/develop a data science application/project/Baoji_AQI')
runApp('datasciencecoursera/develop a data science application/project/Baoji_AQI')
runApp('datasciencecoursera/develop a data science application/project/Baoji_AQI')
dmy("1/1/2014")
>
library(lubridate)
res1 = dmy("1/1/2014")
res2 = ymd("2014/1/1")
res1==res2
shiny::runApp('datasciencecoursera/develop a data science application/project/Baoji_AQI')
runApp('datasciencecoursera/develop a data science application/project/Baoji_AQI')
runApp('datasciencecoursera/develop a data science application/project/Baoji_AQI')
